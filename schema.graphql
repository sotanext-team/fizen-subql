type KVData @jsonField {
  key: String
  value: String
  type: String
}

type Block @entity {
  id: ID!
  number: BigInt
  timestamp: Date
  parentHash: String
  specVersion: String
  stateRoot: String
  extrinsicRoot: String,
  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Event @entity {
  id: ID!

  index: Int
  section: String
  method: String
  data: [KVData]

  timestamp: Date
  blockNumber: BigInt
  block: Block
  extrinsic: Extrinsic
}
type Extrinsic @entity {
  id: ID!

  method: String
  section: String
  args: [KVData]
  signer: Account
  nonce: BigInt
  timestamp: Date
  signature: String
  tip: String
  isSigned: Boolean
  isSuccess: Boolean

  block: Block
  events: [Event] @derivedFrom(field: "extrinsic")
  calls: [Call] @derivedFrom(field: "extrinsic")
}
type Call @entity {
  id: ID!

  section: String
  method: String
  args:[KVData]
  timestamp: Date
  isSuccess: Boolean

  signer: Account
  extrinsic: Extrinsic
  parentCall: Call

  calls: [Call] @derivedFrom(field: "parentCall")
}

type Account @entity {
  id: ID!
  txCount: BigInt
  createAtBlock: Block
  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
  calls: [Call] @derivedFrom(field: "signer")
  transferIn: [Transfer] @derivedFrom(field: "to")
  transferOut: [Transfer] @derivedFrom(field: "from")
  position: [LoanPosition] @derivedFrom(field: "owner")
}

type Transfer @entity {
  id: ID!

  from: Account
  to: Account
  token: Token
  amount: String
  amountInUSD: String

  extrinsic: Extrinsic
  call: Call
  timestamp: Date
  isSuccess: Boolean
}
type LoanAction @entity {
  id: ID!

  account: Account
  collateral: Int
  type: String
  subType: String
  data: [KVData]

  extrinsic: Extrinsic
  timestamp: Date
}
type LoanPosition @entity {
  id: ID!
  owner: Account
  collateral: Token
  debitAmount: String
  collateralAmount: String
}

type SystemConsts @entity {
  id: ID!
  nativeToken: Token
  stableToken: Token
}
type TotalLoanPosition @entity {
  id: ID!
  collateral: Token
  debitAmount: String
  collateralAmount: String
}
type Token @entity {
  id: ID!
  name: String
  decimal: Int
  price: String
  issuance: String
  lockedInLoan: String
  volume: String
  volumeUSD: String
  txCount: BigInt
}
type LoanParams @entity {
  id: ID!

  # the collateral token
  collateral: Token

  debitExchangeRate: String

  # the config start at
  startAtBlockNumber: BigInt
  startAtBlock: Block

  maximumTotalDebitValue: String
  interestRatePerSec: String
  liquidationRatio: String
  liquidationPenalty: String
  requiredCollateralRatio: String
  globalInterestRatePerSec: String
}
type LoanParamsHistory @entity {
  id: ID!

  collateral: Token

  startAtBlockNumber: BigInt
  startAtBlock: Block
  endAtBlockNumber: BigInt
  endAtBlock: Block
  maximumTotalDebitValue: String
  interestRatePerSec: String
  liquidationRatio: String
  liquidationPenalty: String
  requiredCollateralRatio: String
  globalInterestRatePerSec: String
}